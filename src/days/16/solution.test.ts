import { describe, test, expect } from 'bun:test';
import day16 from './solution';

const example1 =
	'###############\n' +
	'#.......#....E#\n' +
	'#.#.###.#.###.#\n' +
	'#.....#.#...#.#\n' +
	'#.###.#####.#.#\n' +
	'#.#.#.......#.#\n' +
	'#.#.#####.###.#\n' +
	'#...........#.#\n' +
	'###.#.#####.#.#\n' +
	'#...#.....#.#.#\n' +
	'#.#.#.###.#.#.#\n' +
	'#.....#...#.#.#\n' +
	'#.###.#.#.#.#.#\n' +
	'#S..#.....#...#\n' +
	'###############';

const example2 =
	'#################\n' +
	'#...#...#...#..E#\n' +
	'#.#.#.#.#.#.#.#.#\n' +
	'#.#.#.#...#...#.#\n' +
	'#.#.#.#.###.#.#.#\n' +
	'#...#.#.#.....#.#\n' +
	'#.#.#.#.#.#####.#\n' +
	'#.#...#.#.#.....#\n' +
	'#.#.#####.#.###.#\n' +
	'#.#.#.......#...#\n' +
	'#.#.###.#####.###\n' +
	'#.#.#...#.....#.#\n' +
	'#.#.#.#####.###.#\n' +
	'#.#.#.........#.#\n' +
	'#.#.#.#########.#\n' +
	'#S#.............#\n' +
	'#################';

describe('On Day 16', () => {
	describe('part1', () => {
		test(`solves example1`, () => {
			expect(day16.solveForPartOne(example1)).toBe('7036');
		});
		test(`solves example2`, () => {
			expect(day16.solveForPartOne(example2)).toBe('11048');
		});
	});

	describe.skip('part2', () => {
		test(`part2 is identity function`, () => {
			expect(day16.solveForPartTwo('hello')).toBe('hello');
		});
	});
});
